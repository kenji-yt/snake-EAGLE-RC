## Check minimum Snakemake version

from snakemake.utils import min_version

min_version("5.20.1")

## Import required libraries
import os
import glob
import re 

## Configuration check

if len(config) == 0:
    
    error_msg=f"Please specify the path to the input directory with --config INPUT_DIR='path/to/input_directory'."
    raise ValueError(error_msg)

## Config

INPUT_DIR = os.path.normpath(config["INPUT_DIR"])
SCRIPTS_DIR = config.get("SCRIPTS_DIR", f"{workflow.basedir}/scripts") # For integration into HEAL (reverse dependency)
ENVS_DIR = config.get("ENVS_DIR", f"{workflow.basedir}/envs") # also for HEAL 
FILTER = config.get("FILTER", True)
if not (FILTER is True or FILTER is False or (isinstance(FILTER, str) and len(FILTER) == 1)):
    raise ValueError("Error: FILTER must be either True, False or flags to pass to fastp.")
if isinstance(FILTER, str):
    FILTER_PARAMS = FILTER
    FILTER = True
elif FILTER is True:
    FILTER_PARAMS = "Default"
elif FILTER is False:
    FILTER_PARAMS = "No filtering"
SOFT_CLIP = config.get("SOFT_CLIP", False)
if not isinstance(SOFT_CLIP, bool):
    raise ValueError("Error: SOFT_CLIP must be either True or False.")

## Parse Input directory

DATA_TYPE = os.path.basename(INPUT_DIR) # Assumes user named input directory after data type (DNA, RNA, WGBS) unless a config file is provided. 
if DATA_TYPE=="DNA":
    ALIGNER="bwa"
elif DATA_TYPE=="RNA":
    ALIGNER="star"
elif DATA_TYPE=="WGBS":
    ALIGNER="bismark"
else:
    error_msg=f"ERROR: Unknown data type. Name the input directory after the data type: 'DNA', 'RNA' or 'WGBS'."
    raise ValueError(error_msg)


SAMPLES = os.listdir(f"{INPUT_DIR}/polyploids") 
PROGENITORS = os.listdir(f"{INPUT_DIR}/progenitors") 



# If a config file is desired/necessary we can add if statement to see if it exists in the input directory. 
# Then verify if input dir format matches config specifications. 

# get list of fasta files within sample directories

accepted_extensions = [
    "*.fastq", "*.fasta", "*.fna", "*.fq", "*.fa",
    "*.fastq.gz", "*.fasta.gz", "*.fna.gz", "*.fq.gz", "*.fa.gz"
]

sample_files = {}

for sample in SAMPLES:

    sample_dir = os.path.join(f"{INPUT_DIR}/polyploids", sample)
    
    fasta_files = []
    for pattern in accepted_extensions:
        paths = glob.glob(os.path.join(sample_dir, pattern), recursive=True)
        fasta_files.extend(os.path.basename(p) for p in paths)

    sample_files[sample] = fasta_files 

### Make wildcard constraints ###
import re
sample_regex = "|".join(re.escape(sample) for sample in SAMPLES)
progenitor_regex = "|".join(re.escape(progenitor) for progenitor in PROGENITORS)

wildcard_constraints: # limit the value of these wildcards to directory names 
    sample = sample_regex,
    progenitor = progenitor_regex


### Rules ###

include: "rules/alignment.smk"
include: "rules/input_functions.smk"
include: "rules/quality_check.smk"
include: "rules/read_classification.smk"
include: "rules/filtering.smk"

rule all:
    input:
        "results/snake_EAGLE_RC_reproducibility_report.txt"

rule make_reproducibility_report:
    input:
        input_dir=f"{INPUT_DIR}",
        multi_qc="results/MultiQC/multiqc_report.html"
    output:
        "results/snake_EAGLE_RC_reproducibility_report.txt"
    params:
        scripts=f"{SCRIPTS_DIR}",
        cores=workflow.cores,
        filtering=FILTER_PARAMS,
        soft_clip=SOFT_CLIP,
        envs_dir=f"{ENVS_DIR}",
    threads:1
    conda:
        "envs/reproducibility.yaml"
    shell:
        "bash {params.scripts}/make_EAGLE_reproducibility_report.sh {input.input_dir} {params.cores} {params.filtering} {params.soft_clip} {params.envs_dir}"
